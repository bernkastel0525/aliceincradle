/*
这是一段 JavaScript 代码，用于创建带有背景图像和信息的卡片交换动画。代码使用了 GSAP 动画库和 imagesLoaded 库。
代码定义了几个变量，包括 buttons、cardsContainerEl、appBgContainerEl 和 cardInfosContainerEl。swapCards 函数根据交换的方向将当前卡片与前一个或后一个卡片进行交换。changeInfo 函数根据交换的方向更改卡片上显示的信息。updateCard 函数根据鼠标指针的位置更新卡片的旋转。resetCardTransforms 函数将卡片旋转重置为其原始位置。initCardEvents 函数初始化卡片事件，removeCardEvents 函数删除卡片事件。init 函数初始化动画时间轴。
代码还定义了一个 waitForImages 函数，在初始化动画之前等待所有图像加载完成。代码使用 imagesLoaded 库检查是否加载了所有图像。一旦所有图像都加载完成，代码就会初始化动画时间轴。
总的来说，这段代码创建了一个具有视觉吸引力的带有背景图像和信息的卡片交换动画。 
 */
console.clear(); const { gsap: a, imagesLoaded: b } = window, buttons = { prev: document.querySelector(".btn--left"), next: document.querySelector(".btn--right") }, cardsContainerEl = document.querySelector(".cards__wrapper"), appBgContainerEl = document.querySelector(".app__bg"), cardInfosContainerEl = document.querySelector(".info__wrapper"); function swapCards(g) { let a = cardsContainerEl.querySelector(".current--card"), b = cardsContainerEl.querySelector(".previous--card"), c = cardsContainerEl.querySelector(".next--card"), d = appBgContainerEl.querySelector(".current--image"), e = appBgContainerEl.querySelector(".previous--image"), f = appBgContainerEl.querySelector(".next--image"); changeInfo(g), a.classList.remove("current--card"), b.classList.remove("previous--card"), c.classList.remove("next--card"), d.classList.remove("current--image"), e.classList.remove("previous--image"), f.classList.remove("next--image"), a.style.zIndex = "50", d.style.zIndex = "-2", "right" === g ? (b.style.zIndex = "20", c.style.zIndex = "30", f.style.zIndex = "-1", a.classList.add("previous--card"), b.classList.add("next--card"), c.classList.add("current--card"), d.classList.add("previous--image"), e.classList.add("next--image"), f.classList.add("current--image")) : "left" === g && (b.style.zIndex = "30", c.style.zIndex = "20", e.style.zIndex = "-1", a.classList.add("next--card"), b.classList.add("current--card"), c.classList.add("previous--card"), d.classList.add("next--image"), e.classList.add("current--image"), f.classList.add("previous--image")), removeCardEvents(a) } function changeInfo(b) { let c = cardInfosContainerEl.querySelector(".current--info"), d = cardInfosContainerEl.querySelector(".previous--info"), e = cardInfosContainerEl.querySelector(".next--info"); a.timeline().to([buttons.prev, buttons.next], { duration: .2, opacity: .5, pointerEvents: "none" }).to(c.querySelectorAll(".text"), { duration: .4, stagger: .1, translateY: "-120px", opacity: 0 }, "-=").call(() => { c.classList.remove("current--info"), d.classList.remove("previous--info"), e.classList.remove("next--info"), "right" === b ? (c.classList.add("previous--info"), e.classList.add("current--info"), d.classList.add("next--info")) : "left" === b && (c.classList.add("next--info"), e.classList.add("previous--info"), d.classList.add("current--info")) }).call(() => initCardEvents()).fromTo("right" === b ? e.querySelectorAll(".text") : d.querySelectorAll(".text"), { opacity: 0, translateY: "40px" }, { duration: .4, stagger: .1, translateY: "0px", opacity: 1 }).to([buttons.prev, buttons.next], { duration: .2, opacity: 1, pointerEvents: "all" }) } function updateCard(c) { let d = c.currentTarget, b = d.getBoundingClientRect(), f = { x: b.left + b.width / 2, y: b.top + b.height / 2 }, e = Math.atan2(c.pageX - f.x, 0) * (35 / Math.PI); a.set(d, { "--current-card-rotation-offset": `${e}deg` }); let g = cardInfosContainerEl.querySelector(".current--info"); a.set(g, { rotateY: `${e}deg` }) } function resetCardTransforms(b) { let c = b.currentTarget, d = cardInfosContainerEl.querySelector(".current--info"); a.set(c, { "--current-card-rotation-offset": 0 }), a.set(d, { rotateY: 0 }) } function initCardEvents() { let a = cardsContainerEl.querySelector(".current--card"); a.addEventListener("pointermove", updateCard), a.addEventListener("pointerout", a => { resetCardTransforms(a) }) } function removeCardEvents(a) { a.removeEventListener("pointermove", updateCard) } function init() { a.timeline().to(cardsContainerEl.children, { delay: .15, duration: .5, stagger: { ease: "power4.inOut", from: "right", amount: .1 }, "--card-translateY-offset": "0%" }).to(cardInfosContainerEl.querySelector(".current--info").querySelectorAll(".text"), { delay: .5, duration: .4, stagger: .1, opacity: 1, translateY: 0 }).to([buttons.prev, buttons.next], { duration: .4, opacity: 1, pointerEvents: "all" }, "-=0.4") } buttons.next.addEventListener("click", () => swapCards("right")), buttons.prev.addEventListener("click", () => swapCards("left")), initCardEvents(); const waitForImages = () => { let c = [...document.querySelectorAll("img")], d = c.length, e = 0, f = document.querySelector(".loader span"); a.set(cardsContainerEl.children, { "--card-translateY-offset": "100vh" }), a.set(cardInfosContainerEl.querySelector(".current--info").querySelectorAll(".text"), { translateY: "40px", opacity: 0 }), a.set([buttons.prev, buttons.next], { pointerEvents: "none", opacity: "0" }), c.forEach(c => { b(c, c => { if (c.isComplete) { let b = ++e / d; a.to(f, { duration: 1, scaleX: b, backgroundColor: `hsl(${120 * b}, 100%, 50%` }), d == e && a.timeline().to(".loading__wrapper", { duration: .8, opacity: 0, pointerEvents: "none" }).call(() => init()) } }) }) }; waitForImages()